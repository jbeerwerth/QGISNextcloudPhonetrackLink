# -*- coding: utf-8 -*-
"""
/***************************************************************************
 NextcloudPhonetrack
                                 A QGIS plugin
 Nextcloud Phonetrack Link imports Points/ Lines from a Nextcloud instance.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-01-16
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Joachim Beerwerth
        email                : joachim.beerwerth@tu-dortmund.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant, QTimer
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox

from qgis.core import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .NextcloudPhonetrack_dialog import NextcloudPhonetrackDialog
import os.path
import json
import urllib.request

from datetime import datetime

class NextcloudPhonetrack:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'NextcloudPhonetrack_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Nextcloud Phonetrack Link')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        
        # Variables which are used for lines with no color set. nextautoclor is the index of the next color.
        self.colorlist = ["blue", "red", "green", "yellow", "cyan", "magenta", "gray", "white", "black", "darkblue", "darkred", "darkgreen", "darkyellow", "darkmagenta", "darkmagenta"]
        self.nextautocolor = 0
        
        # The following variables are first declared here (mostly for clarity), they will be reset when sync is started
        
        # This variables are used to store the three layer objects and the corresponding data provider for them
        # Layer for all Positions with symbols
        self.layerall = None
        self.providerall =  None
        # Layer for all Positions with lines
        self.layerallline = None
        self.provideralllineprovider = None
        # Layer for the last Positions wit symbols
        self.layerlast = None
        self.providerlast = None
        
        # Timer object used for regular updates
        self.timer = None
        
        # Categorical renderer for the Positions layer (with points and lines)
        self.catrenderer = None
        self.catrendererline = None
        
        # Dictionaries to store the timestamp of the last received point for each line
        self.linenamesall = {}
        # Dictionaries to store the last point for each line. This is needed to append the line.
        self.lastpointsall = {}
        
        # The URL for syncing all points
        self.urlall = ""
        # The URL for syncing the last position
        self.urllast = ""
        # The min value for all timestamps, points with lower timestamps are not shown.
        # Originally this was intended for all lines, but as the timestamps might be set by the client it is possible,
        # that one device is running more than the sync intervall before all other devices. Therefore it is possible to
        # store the last timestamp for each device seperate. This vars only hold the time set in the dialog.
        self.lasttimeallrec = 0
        self.lasttimelastrec = 0
        
        # Variable to store the sync intervall (0 means only one initial sync)
        self.intervall = 0
        # Variable to store the number of max points loaded for first sync
        self.maxfirstsync = 0
        # Variable to store the number of max points loaded for all following syncs
        self.maxsync = 0
        # This Variable is first set to maxfirstsync and at the end of the first sync set to maxsync.
        self.nextmaxsync = 0
        

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('NextcloudPhonetrack', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToWebMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/NextcloudPhonetrack/icon.svg'
        self.add_action(
            icon_path,
            text=self.tr(u'Import Nextcloud Phonetrack'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginWebMenu(
                self.tr(u'&Nextcloud Phonetrack Link'),
                action)
            self.iface.removeToolBarIcon(action)
    
    def updateData(self):
        # This Method is called by the timer or the run method and starts a task to fetch the data (in a different thread) and then show the data (in the main thread)
        # globals is necessary because of scope problems, see https://gis.stackexchange.com/questions/296175/issues-with-qgstask-and-task-manager
        # this is a bad workaround, for propper solution see stackexchange post
        # only sync if URL is not empty.
        if self.urlall != "":
            QgsMessageLog.logMessage("Create Task to fetch all data.", 'NextcloudPhonetrack', Qgis.Info)
            globals()['taskall'] = QgsTask.fromFunction("nextcloudretrievealldata", self.fetchdataall, on_finished=self.showalldata)
            QgsApplication.taskManager().addTask(globals()['taskall'])
        if self.urllast != "":
            QgsMessageLog.logMessage("Create Task to fetch last data.", 'NextcloudPhonetrack', Qgis.Info)
            globals()['tasklast'] = QgsTask.fromFunction("nextcloudretrievelastdata", self.fetchdatalast, on_finished=self.showlastdata)
            QgsApplication.taskManager().addTask(globals()['tasklast'])
        
    
    def fetchdataall(self, task):
        if self.urlall != "":
            #TODO: This could be solved using regular expressions. Furthermore this only works if the keyword is in the URL contained.
            limitedurl = self.urlall.replace("limit=number", "limit={}".format(self.nextmaxsync))
            self.nextmaxsync = self.maxsync
            allreq = urllib.request.urlopen(limitedurl)
            data = allreq.read()
            decdata = json.loads(data)
            QgsMessageLog.logMessage("Fetched all data from url {}".format(limitedurl), 'NextcloudPhonetrack', Qgis.Info)
            
            
            for element in decdata:
                for linename, linedata in decdata[element].items():
                    points = linedata['points']
                    toremove = []
                    QgsMessageLog.logMessage('Line {} contains {} points'.format(linename, len(points)), 'NextcloudPhonetrack', Qgis.Info)
                    for p in points:
                        dt = datetime.fromtimestamp(p["timestamp"])
                        p["datetime"] = dt.strftime("%d.%m.%Y, %H:%M:%S")
                        if (linename in self.linenamesall and p['timestamp'] <= self.linenamesall[linename]) or p['timestamp'] < self.lasttimeallrec:
                            toremove.append(p)
                        
                    QgsMessageLog.logMessage('Now Remove {} old points'.format(len(toremove)), 'NextcloudPhonetrack', Qgis.Info)
                    for p in toremove:
                        points.remove(p)
            
            return decdata
        else:
            return Nones
            
    
    def fetchdatalast(self, task):
        if self.urllast != "":
            lastreq = urllib.request.urlopen(self.urllast)
            data = lastreq.read()
            decdata = json.loads(data)
            QgsMessageLog.logMessage("Fetched last data.", 'NextcloudPhonetrack', Qgis.Info)
            return decdata
        else:
            return None
    
    def showalldata(self, exception, decdata = None):
        QgsMessageLog.logMessage("Start method to show all Data.", 'NextcloudPhonetrack', Qgis.Info) 
        if exception is None:
            if decdata is not None:
                if self.layerallline is None:
                    self.layerallline = QgsVectorLayer("linestring?crs=EPSG:4326", "Tracks from Nextcloud - line", "memory")
                    self.layerallline.startEditing()
                    self.layerallline.setCustomProperty("skipMemoryLayersCheck", 1)
                    self.provideralllineprovider = self.layerallline.dataProvider()
                    self.provideralllineprovider.addAttributes([QgsField("name", QVariant.String)])
                    self.layerallline.updateFields()
                    QgsProject.instance().addMapLayer(self.layerallline)
                    self.catrendererline = QgsCategorizedSymbolRenderer("name")
                    self.layerallline.setRenderer(self.catrendererline)
                    self.layerallline.commitChanges()
                
                if self.layerall is None:
                    self.layerall = QgsVectorLayer("point?crs=EPSG:4326", "Tracks from Nextcloud - points", "memory")
                    self.layerall.startEditing()
                    self.layerall.setCustomProperty("skipMemoryLayersCheck", 1)
                    self.providerall = self.layerall.dataProvider()
                    self.providerall.addAttributes([QgsField("timestamp", QVariant.Int), QgsField("accuracy", QVariant.Double), QgsField("altitude", QVariant.Double), QgsField("speed", QVariant.Double), QgsField("bearing", QVariant.Double), QgsField("batterylevel", QVariant.Double), QgsField("useragent", QVariant.String), QgsField("name", QVariant.String), QgsField("datetime", QVariant.String)])
                    self.layerall.updateFields()
                    self.layerall.setMapTipTemplate('Name: <b>[% "name" %]</b><br />Time: <b>[% "datetime" %]</b><br />Altitude: <b>[% "altitude" %]</b><br />Accuracy: <b>[% "accuracy" %]</b><br />Speed: <b>[% "speed" %]</b><br />Bearing: <b>[% "bearing" %]</b><br />Batterylevel: <b>[% "batterylevel" %]</b>')
                    QgsProject.instance().addMapLayer(self.layerall)
                    self.catrenderer = QgsCategorizedSymbolRenderer("name")
                    self.layerall.setRenderer(self.catrenderer)
                    self.layerall.commitChanges()
                
                
                if not self.layerall.isValid() or not self.layerallline.isValid():
                    QgsMessageLog.logMessage("Failed to fetch a valid layer for last point.", 'NextcloudPhonetrack', Qgis.Warning) 
                else:
                    self.layerallline.startEditing()
                    self.layerall.startEditing()
                    
                    
                    try:
                        for element in decdata:
                            QgsMessageLog.logMessage('Found {} lines'.format(len(decdata[element])), 'NextcloudPhonetrack', Qgis.Info)
                            for linename, linedata in decdata[element].items():
                                points = linedata["points"]
                                QgsMessageLog.logMessage('Line {} contains {} points'.format(linename, len(points)), 'NextcloudPhonetrack', Qgis.Info)
                                isnewline = False
                                
                                if not linename in self.linenamesall:
                                    markersymbolproperties = {"name": "circle"}
                                    if linedata["color"] is not None:
                                        markersymbolproperties["color"] = linedata["color"]
                                    else:
                                        markersymbolproperties["color"] = self.colorlist[self.nextautocolor]
                                    marker = QgsMarkerSymbol.createSimple(markersymbolproperties)
                                    self.catrenderer.addCategory(QgsRendererCategory(linename, marker, linename))
                                    
                                    linemarkersymbolproperties = {}
                                    if linedata["color"] is not None:
                                        linemarkersymbolproperties["color"] = linedata["color"]
                                    else:
                                        linemarkersymbolproperties["color"] = self.colorlist[self.nextautocolor]
                                        self.nextautocolor = (self.nextautocolor + 1)%len(self.colorlist)
                                        
                                    linemarker = QgsLineSymbol.createSimple(linemarkersymbolproperties)
                                    self.catrendererline.addCategory(QgsRendererCategory(linename, linemarker, linename))
                                    self.linenamesall[linename] = self.lasttimeallrec
                                    isnewline = True
                                
                                qpoints = []
                                
                                for p in points:
                                    qpoint = QgsPointXY(p["lon"],p["lat"])
                                    qpoints.append(qpoint)
                                    f = QgsFeature()
                                    f.setGeometry(QgsGeometry.fromPointXY(qpoint))
                                    f.setAttributes([p["timestamp"], p["accuracy"], p["altitude"], p["speed"], p["bearing"], p["batterylevel"], p["useragent"], linename, p["datetime"]])
                                    
                                    self.layerall.addFeature(f)
                                    
                                    
                                    if p["timestamp"] > self.linenamesall[linename]:
                                        self.linenamesall[linename] = p["timestamp"]
                                
                                
                                if isnewline:
                                    fline = QgsFeature()
                                    qline = QgsGeometry.fromPolylineXY(qpoints)
                                    fline.setGeometry(qline)
                                    fline.setAttributes([linename])
                                    self.layerallline.addFeature(fline)
                                else:
                                    if len(qpoints) > 0:
                                        qpoints.insert(0,self.lastpointsall[linename])
                                        request = QgsFeatureRequest().setFilterExpression("name = '{}'".format(linename))
                                        for f in self.layerallline.getFeatures(request):
                                            g = f.geometry()
                                            g.addPointsXY(qpoints)
                                            self.provideralllineprovider.changeGeometryValues({f.id(): g})
                                if len(qpoints) > 0:
                                    self.lastpointsall[linename] = qpoints[-1]
                                        
                    except Exception as e:
                        QgsMessageLog.logMessage('Exception in show all data for loop: {}'.format(str(e)), 'NextcloudPhonetrack', Qgis.Warning)
                    
                    self.layerall.updateExtents()
                    self.layerall.commitChanges()
                    self.layerallline.updateExtents()
                    self.layerallline.commitChanges()
                    self.iface.layerTreeView().refreshLayerSymbology(self.layerall.id())
                    self.iface.layerTreeView().refreshLayerSymbology(self.layerallline.id())
                    
                    
            else:
               QgsMessageLog.logMessage("Fetch all data did not return the Data", 'NextcloudPhonetrack') 
        else:
            QgsMessageLog.logMessage("Exception in fetch all data: {}".format(exception), 'NextcloudPhonetrack', Qgis.Info)
    
    def showlastdata(self, exception, decdata = None):
        QgsMessageLog.logMessage("Start method to show last Data.", 'NextcloudPhonetrack', Qgis.Info) 
        if exception is None:
            if decdata is not None:
                if self.layerlast is None:
                    self.layerlast = QgsVectorLayer("point?crs=EPSG:4326", "Last Points from Nextcloud", "memory")
                    self.layerlast.setCustomProperty("skipMemoryLayersCheck", 1)
                    self.layerlast.startEditing()
                    self.providerlast = self.layerlast.dataProvider()
                    self.providerlast.addAttributes([QgsField("timestamp", QVariant.Int), QgsField("accuracy", QVariant.Double), QgsField("altitude", QVariant.Double), QgsField("speed", QVariant.Double), QgsField("bearing", QVariant.Double), QgsField("batterylevel", QVariant.Double), QgsField("useragent", QVariant.String), QgsField("name", QVariant.String), QgsField("datetime", QVariant.String)])
                    self.layerlast.updateFields()
                    self.layerlast.setMapTipTemplate('Name: <b>[% "name" %]</b><br />Time: <b>[% "datetime" %]</b><br />Altitude: <b>[% "altitude" %]</b><br />Accuracy: <b>[% "accuracy" %]</b><br />Speed: <b>[% "speed" %]</b><br />Bearing: <b>[% "bearing" %]</b><br />Batterylevel: <b>[% "batterylevel" %]</b>')
                    QgsProject.instance().addMapLayer(self.layerlast)
                else:
                    self.layerlast.startEditing()
                    self.layerlast.selectAll()
                    self.layerlast.deleteSelectedFeatures()
                    
                
                if not self.layerlast.isValid():
                    QgsMessageLog.logMessage("Failed to fetch a valid layer for last point.", 'NextcloudPhonetrack', Qgis.Warning) 
                else:
                    QgsMessageLog.logMessage("Show last data.", 'NextcloudPhonetrack', Qgis.Info) 
                    
                    for element in decdata:
                        QgsMessageLog.logMessage('Found {} Points'.format(len(decdata[element])), 'NextcloudPhonetrack', Qgis.Info)
                        for pointname, p in decdata[element].items():
                            qpoint = QgsPointXY(p["lon"],p["lat"])
                            f = QgsFeature()
                            f.setGeometry(QgsGeometry.fromPointXY(qpoint))
                            dt = datetime.fromtimestamp(p["timestamp"])
                            f.setAttributes([p["timestamp"], p["accuracy"], p["altitude"], p["speed"], p["bearing"], p["batterylevel"], p["useragent"], pointname, dt.strftime("%d.%m.%Y, %H:%M:%S")])
                            self.layerlast.addFeature(f)
                            self.layerlast.updateExtents()
                            
                            
                    QgsMessageLog.logMessage("Show commit changes...", 'NextcloudPhonetrack', Qgis.Info)
                    self.layerlast.commitChanges()
            else:
               QgsMessageLog.logMessage("Fetch last data did not return the Data", 'NextcloudPhonetrack', Qgis.Warning) 
        else:
            QgsMessageLog.logMessage("Exception in fetch last data: {}".format(exception), 'NextcloudPhonetrack', Qgis.Warning)
    
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = NextcloudPhonetrackDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # set the variables to the corresponding values from dialog
            self.urlall = self.dlg.urlAllPositions.text()
            self.urllast = self.dlg.urlLastPosition.text()
            self.lasttimeallrec = self.dlg.importafter.dateTime().toSecsSinceEpoch()
            self.lasttimelastrec = self.lasttimeallrec
            self.intervall = self.dlg.intervallSpinner.value()
            self.maxfirstsync = self.dlg.maxInitialSync.value()
            self.maxsync = self.dlg.maxSync.value()
            self.nextmaxsync = self.maxfirstsync
            
            # set other variables to corresponding values
            self.layerall = None
            self.providerall =  None
            self.layerallline = None
            self.provideralllineprovider = None
            self.layerlast = None
            self.providerlast = None
            
            self.linenamesall = {}
            self.lastpointsall = {}
            
            # Stop and remove old timer if one already exists
            if self.timer is not None:
                self.timer.stop()
                self.timer = None
            
            # Start Update tsks
            self.updateData()
            
            # if intervall is set start timer for regular refresh
            if self.intervall > 0:
                self.timer = QTimer()
                self.timer.timeout.connect(self.updateData)
                self.timer.start(self.intervall*1000)
